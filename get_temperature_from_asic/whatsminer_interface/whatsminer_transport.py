#!/usr/bin/env python3
"""
TCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å Whatsminer
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É TCP
"""

import socket
import struct
import json
import time
from typing import Optional, Dict, Any


class WhatsminerTCP:
    """–ö–ª–∞—Å—Å –¥–ª—è TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Whatsminer"""
    
    def __init__(self, ip_address: str, port: int = 4433, account: str = "super", password: str = "super"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TCP –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            ip_address (str): IP –∞–¥—Ä–µ—Å –º–∞–π–Ω–µ—Ä–∞
            port (int): –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4433)
            account (str): –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å
            password (str): –ü–∞—Ä–æ–ª—å
        """
        self.ip_address = ip_address
        self.port = port
        self.account = account
        self.password = password
        self.socket = None
        self.connected = False
        
    def connect(self, timeout: int = 10) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–∞–π–Ω–µ—Ä–æ–º
        
        Args:
            timeout (int): –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(timeout)
            self.socket.connect((self.ip_address, self.port))
            self.connected = True
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.ip_address}:{self.port} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except ConnectionRefusedError:
            print(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ {self.ip_address}:{self.port}")
            return False
        except socket.timeout:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.ip_address}:{self.port}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def send(self, data: bytes, length: int, api_instance=None) -> Optional[Dict[Any, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            data (bytes): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            length (int): –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            api_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä API –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç –º–∞–π–Ω–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.connected or not self.socket:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return None
            
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞
            header = struct.pack('<I', length)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
            self.socket.sendall(header + data)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            response_header = self._receive_exact(4)
            if not response_header:
                return None
                
            response_length = struct.unpack('<I', response_header)[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
            if response_length > 100000:  # –ë–æ–ª—å—à–µ 100KB - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                print(f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ {response_length} –±–∞–π—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è!")
                return None  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
            response_data = self._receive_exact(response_length)
            if not response_data:
                return None
            
            return self._parse_json_response(response_data, api_instance)
                
        except socket.timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def _receive_exact(self, length: int) -> Optional[bytes]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–π—Ç
        
        Args:
            length (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            
        Returns:
            bytes: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        data = b''
        start_time = time.time()
        print(f"üîç –û–∂–∏–¥–∞–Ω–∏–µ {length} –±–∞–π—Ç...")
        
        while len(data) < length:
            try:
                chunk = self.socket.recv(length - len(data))
                if not chunk:
                    print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π")
                    return None
                data += chunk
                print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(chunk)} –±–∞–π—Ç, –≤—Å–µ–≥–æ: {len(data)}/{length}")
            except socket.timeout:
                elapsed = time.time() - start_time
                print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—à–ª–æ {elapsed:.1f}—Å)")
                return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return None
        
        elapsed = time.time() - start_time
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –±–∞–π—Ç –∑–∞ {elapsed:.1f}—Å")
        return data
    
    def _receive_until_complete_json(self, initial_data: bytes) -> Optional[bytes]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª–∏–Ω—ã
        
        Args:
            initial_data: –ù–∞—á–∞–ª—å–Ω—ã–µ 4 –±–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            bytes: –ü–æ–ª–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        data = initial_data
        brace_count = 0
        in_string = False
        escape_next = False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for byte in data:
            char = chr(byte) if 32 <= byte <= 126 else ''
            if escape_next:
                escape_next = False
                continue
            if char == '\\':
                escape_next = True
                continue
            if char == '"' and not escape_next:
                in_string = not in_string
                continue
            if not in_string:
                if char == '{':
                    brace_count += 1
                elif char == '}':
                    brace_count -= 1
        
        # –ß–∏—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –ø–æ–ª–Ω—ã–π JSON
        timeout_start = time.time()
        while brace_count > 0 and (time.time() - timeout_start) < 5:
            try:
                chunk = self.socket.recv(1024)
                if not chunk:
                    break
                
                data += chunk
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                for byte in chunk:
                    char = chr(byte) if 32 <= byte <= 126 else ''
                    if escape_next:
                        escape_next = False
                        continue
                    if char == '\\':
                        escape_next = True
                        continue
                    if char == '"' and not escape_next:
                        in_string = not in_string
                        continue
                    if not in_string:
                        if char == '{':
                            brace_count += 1
                        elif char == '}':
                            brace_count -= 1
                        
                        if brace_count == 0:
                            # –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü JSON
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π JSON: {len(data)} –±–∞–π—Ç")
                            return data
                        
            except socket.timeout:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
                break
        
        if brace_count == 0:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π JSON: {len(data)} –±–∞–π—Ç")
            return data
        else:
            print(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–π JSON: –æ–∂–∏–¥–∞–µ—Ç—Å—è –µ—â–µ {brace_count} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫")
            return None
    
    def _parse_json_response(self, response_data: bytes, api_instance=None) -> Optional[Dict[Any, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
        
        Args:
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
            api_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä API –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            
        Returns:
            dict: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
            response_json = json.loads(response_data.decode())
            return response_json
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
            if api_instance and hasattr(api_instance, 'decrypt_response'):
                decrypted_response = api_instance.decrypt_response(response_data)
                if decrypted_response:
                    return decrypted_response
            
            # –í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return {"encrypted_data": response_data}
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.socket:
            try:
                self.socket.close()
                self.connected = False
                print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.ip_address}:{self.port} –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def is_connected(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        """
        return self.connected and self.socket is not None
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–∞–π–Ω–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            test_socket.settimeout(5)
            result = test_socket.connect_ex((self.ip_address, self.port))
            test_socket.close()
            
            if result == 0:
                print(f"‚úÖ –ú–∞–π–Ω–µ—Ä {self.ip_address}:{self.port} –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå –ú–∞–π–Ω–µ—Ä {self.ip_address}:{self.port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False 