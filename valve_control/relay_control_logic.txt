ЛОГИКА УПРАВЛЕНИЯ РЕЛЕЙНЫМ МОДУЛЕМ ДЛЯ КОНТРОЛЛЕРА ТЕМПЕРАТУРЫ КРИПТОКОТЛА
================================================================================

На основе анализа проекта controller_bitboil выявлена следующая логика управления релейным модулем через GPIO Raspberry Pi:

1. НАСТРОЙКИ GPIO
================================================================================
- Используется библиотека RPi.GPIO
- Режим нумерации пинов: GPIO.BCM (стандартный режим для Raspberry Pi)
- По умолчанию используется GPIO пин 17 (физический пин 11 на разъеме)
- Пин настраивается как выход: GPIO.setup(pin, GPIO.OUT)
- Отключаются предупреждения GPIO: GPIO.setwarnings(False)

2. ЛОГИКА УПРАВЛЕНИЯ РЕЛЕ
================================================================================
ВАЖНО: В проекте используется ИНВЕРТИРОВАННАЯ логика управления реле!

- GPIO.HIGH (логическая 1) = РЕЛЕ ВЫКЛЮЧЕНО = ОХЛАЖДЕНИЕ ВЫКЛЮЧЕНО
- GPIO.LOW (логическая 0) = РЕЛЕ ВКЛЮЧЕНО = ОХЛАЖДЕНИЕ ВКЛЮЧЕНО

Это связано с тем, что большинство релейных модулей имеют инвертированную логику:
- При подаче HIGH на управляющий пин реле размыкается
- При подаче LOW на управляющий пин реле замыкается

3. ФУНКЦИИ УПРАВЛЕНИЯ
================================================================================

Инициализация GPIO:
- GPIO.setmode(GPIO.BCM)
- GPIO.setwarnings(False)
- GPIO.setup(RELAY_PIN, GPIO.OUT)
- GPIO.output(RELAY_PIN, GPIO.HIGH)  # Изначально реле выключено

Включение реле (охлаждения):
- GPIO.output(pin, GPIO.LOW)

Выключение реле (охлаждения):
- GPIO.output(pin, GPIO.HIGH)

Очистка ресурсов:
- GPIO.cleanup()  # Обязательно вызывать при завершении программы

4. ЛОГИКА КОНТРОЛЯ ТЕМПЕРАТУРЫ
================================================================================

Алгоритм работы с гистерезисом:
1. Если температура >= max_threshold И охлаждение выключено → ВКЛЮЧИТЬ охлаждение
2. Если температура <= min_threshold И охлаждение включено → ВЫКЛЮЧИТЬ охлаждение
3. В остальных случаях состояние не меняется

Пример пороговых значений:
- Для жидкости: max=40°C, min=40°C (без гистерезиса)



7. КОНФИГУРАЦИЯ
================================================================================

Основные параметры в config.py:
- RELAY_PIN = 17  # GPIO пин для реле


Настраиваемые через CLI:
- --relay-pin: изменить GPIO пин


8. ТЕСТИРОВАНИЕ
================================================================================


- utils/manual_relay_control.py: ручное управление (on/off/toggle/test)

Команды для ручного управления:
python3 manual_relay_control.py on     # Включить реле
python3 manual_relay_control.py off    # Выключить реле


9. СХЕМА ПОДКЛЮЧЕНИЯ
================================================================================

Raspberry Pi GPIO → Релейный модуль:
- GPIO 17 (пин 11) → IN1 (управляющий вход реле)
- 5V (пин 2 или 4) → VCC (питание модуля)
- GND (пин 6, 9, 14, 20, 25, 30, 34, 39) → GND (земля модуля)

Релейный модуль → Нагрузка (клапаны):
- COM (общий контакт) → один провод нагрузки
- NO (нормально разомкнутый) → второй провод нагрузки
- NC (нормально замкнутый) → не используется

