#!/usr/bin/env python3
"""
–†–µ–≥—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ–º/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∂–∏–¥–∫–æ—Å—Ç–∏
"""

import time
import logging
import threading
from typing import Optional, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

from .relay_controller import RelayController
from .config import TemperatureConfig, SafetyConfig, DEFAULT_TEMPERATURE_CONFIG, DEFAULT_SAFETY_CONFIG

class RegulatorState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞"""
    STOPPED = "stopped"
    RUNNING = "running"
    ERROR = "error"

@dataclass
class RegulatorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    temperature_config: TemperatureConfig
    safety_config: SafetyConfig
    # –ü–æ—Ä–æ–≥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ data_manager)
    min_temperature: float = 45.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ data_manager
    max_temperature: float = 50.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ data_manager

class TemperatureRegulator:
    """
    –†–µ–≥—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
    
    –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
    1. –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ >= max_threshold –ò –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Üí –í–ö–õ–Æ–ß–ò–¢–¨ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
    2. –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ <= min_threshold –ò –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ ‚Üí –í–´–ö–õ–Æ–ß–ò–¢–¨ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
    3. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    """
    
    def __init__(self, 
                 relay_controller: RelayController,
                 temperature_callback: Callable[[], Optional[float]],
                 config: Optional[RegulatorConfig] = None,
                 temperature_settings_callback: Optional[Callable[[], Optional[dict]]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        
        Args:
            relay_controller: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–ª–µ
            temperature_callback: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
            temperature_settings_callback: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–∑ data_manager
        """
        self.relay_controller = relay_controller
        self.temperature_callback = temperature_callback
        self.temperature_settings_callback = temperature_settings_callback
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        if config is None:
            config = RegulatorConfig(
                temperature_config=DEFAULT_TEMPERATURE_CONFIG,
                safety_config=DEFAULT_SAFETY_CONFIG
            )
        self.config = config
        
        self.logger = logging.getLogger(__name__)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
        self.state = RegulatorState.STOPPED
        self._running = False
        self._thread = None
        self._stop_event = threading.Event()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._start_time = None
        self._last_temperature = None
        self._last_temperature_time = None
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self._total_cycles = 0
        self._cooling_cycles = 0
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._last_settings_check = None
        self._settings_check_interval = 1.0  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self._settings_update_count = 0
        
    def start(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        if self._running:
            self.logger.warning("–†–µ–≥—É–ª—è—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        
        if not self.relay_controller.is_initialized():
            self.logger.error("–†–µ–ª–µ–π–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            self._running = True
            self._stop_event.clear()
            self.state = RegulatorState.RUNNING
            self._start_time = datetime.now()
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            self._thread = threading.Thread(target=self._regulation_loop, daemon=True)
            self._thread.start()
            
            self.logger.info("–†–µ–≥—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞: {e}")
            self._running = False
            self.state = RegulatorState.ERROR
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        if not self._running:
            return
        
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        
        self._running = False
        self._stop_event.set()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self._thread and self._thread.is_alive():
            self._thread.join(timeout=5.0)
        
        # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        self.relay_controller.turn_off()
        
        self.state = RegulatorState.STOPPED
        self.logger.info("–†–µ–≥—É–ª—è—Ç–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _regulation_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        self.logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        
        while self._running and not self._stop_event.is_set():
            try:
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                self._check_and_update_temperature_settings()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                temperature = self._get_temperature_safe()
                
                if temperature is None:
                    self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
                    continue
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._last_temperature = temperature
                self._last_temperature_time = datetime.now()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                self._regulate_temperature(temperature)
                
                self._total_cycles += 1
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                self.state = RegulatorState.ERROR
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            self._stop_event.wait(self.config.temperature_config.control_interval)
        
        self.logger.info("–¶–∏–∫–ª —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _get_temperature_safe(self) -> Optional[float]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        
        Returns:
            float: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            return self.temperature_callback()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
            return None
    
    def _regulate_temperature(self, temperature: float):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
        
        Args:
            temperature: –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        """
        cooling_active = self.relay_controller.get_relay_state()
        max_temp = self.config.max_temperature
        min_temp = self.config.min_temperature
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.logger.debug(f"–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: T={temperature:.1f}¬∞C, –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ={'–í–ö–õ' if cooling_active else '–í–´–ö–õ'}, "
                         f"–ø–æ—Ä–æ–≥–∏=[{min_temp:.1f}¬∞C - {max_temp:.1f}¬∞C]")
        
        if not cooling_active and temperature >= max_temp:
            # –í–∫–ª—é—á–∏—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            self.logger.info(f"üî• –ü–û–ü–´–¢–ö–ê –í–ö–õ–Æ–ß–ï–ù–ò–Ø: T={temperature:.1f}¬∞C >= {max_temp:.1f}¬∞C")
            if self.relay_controller.turn_on():
                self._cooling_cycles += 1
                self.logger.info(f"‚úÖ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ: {temperature}¬∞C >= {max_temp}¬∞C")
            else:
                self.logger.error(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –í–ö–õ–Æ–ß–ò–¢–¨ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ T={temperature:.1f}¬∞C")
        
        elif cooling_active and temperature <= min_temp:
            # –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            self.logger.info(f"‚ùÑÔ∏è –ü–û–ü–´–¢–ö–ê –í–´–ö–õ–Æ–ß–ï–ù–ò–Ø: T={temperature:.1f}¬∞C <= {min_temp:.1f}¬∞C")
            if self.relay_controller.turn_off():
                self.logger.info(f"‚úÖ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ: {temperature}¬∞C <= {min_temp}¬∞C")
            else:
                self.logger.error(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –í–´–ö–õ–Æ–ß–ò–¢–¨ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ T={temperature:.1f}¬∞C")
        
        else:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
            if cooling_active:
                self.logger.debug(f"‚è≥ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è –¥–æ {min_temp:.1f}¬∞C (—Ç–µ–∫—É—â–∞—è: {temperature:.1f}¬∞C)")
            else:
                self.logger.debug(f"‚è≥ –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ {max_temp:.1f}¬∞C (—Ç–µ–∫—É—â–∞—è: {temperature:.1f}¬∞C)")
    
    def _check_and_update_temperature_settings(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏–∑ data_manager
        """
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if (self._last_settings_check is None or 
            (current_time - self._last_settings_check).total_seconds() >= self._settings_check_interval):
            
            self._last_settings_check = current_time
            
            if self.temperature_settings_callback:
                try:
                    settings = self.temperature_settings_callback()
                    
                    if settings and 'max_temperature' in settings and 'min_temperature' in settings:
                        new_max_temp = settings['max_temperature']
                        new_min_temp = settings['min_temperature']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        current_max = self.config.max_temperature
                        current_min = self.config.min_temperature
                        
                        if new_max_temp != current_max or new_min_temp != current_min:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ RegulatorConfig
                            self.config.max_temperature = new_max_temp
                            self.config.min_temperature = new_min_temp
                            self._settings_update_count += 1
                            
                            self.logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ data_manager: "
                                           f"{new_min_temp}¬∞C - {new_max_temp}¬∞C (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{self._settings_update_count})")
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
    
    def get_status(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
        
        Returns:
            dict: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
        """
        current_time = datetime.now()
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = None
        if self._start_time:
            uptime = current_time - self._start_time
        
        # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temp_age = None
        if self._last_temperature_time:
            temp_age = current_time - self._last_temperature_time
        
        # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_check_age = None
        if self._last_settings_check:
            settings_check_age = current_time - self._last_settings_check
        
        return {
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
            "state": self.state.value,
            "is_running": self._running,
            "cooling_active": self.relay_controller.get_relay_state(),
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            "current_temperature": self._last_temperature,
            "temperature_age_seconds": temp_age.total_seconds() if temp_age else None,
            "last_temperature_time": self._last_temperature_time.isoformat() if self._last_temperature_time else None,
            
            # –ü–æ—Ä–æ–≥–∏
            "max_temperature": self.config.max_temperature,
            "min_temperature": self.config.min_temperature,
            "hysteresis": self.config.temperature_config.hysteresis,
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "total_cycles": self._total_cycles,
            "cooling_cycles": self._cooling_cycles,
            "settings_updates": self._settings_update_count,
            "uptime_seconds": uptime.total_seconds() if uptime else None,
            "start_time": self._start_time.isoformat() if self._start_time else None,
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            "last_settings_check": self._last_settings_check.isoformat() if self._last_settings_check else None,
            "settings_check_age_seconds": settings_check_age.total_seconds() if settings_check_age else None,
            "settings_check_interval": self._settings_check_interval,
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            "control_interval": self.config.temperature_config.control_interval
        }
    
    def update_config(self, config: RegulatorConfig):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
        
        Args:
            config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.config = config
        self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞"""
        return self._running
    
    def get_last_temperature(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        return self._last_temperature
    
    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.start()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.stop() 