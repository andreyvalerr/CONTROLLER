#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∂–∏–¥–∫–æ—Å—Ç–∏
–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º –∫–ª–∞–ø–∞–Ω–æ–≤ –∫—Ä–∏–ø—Ç–æ–∫–æ—Ç–ª–∞
"""

import time
import threading
from typing import Optional
from simple_monitor import SimpleTemperatureMonitor, TemperatureData

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
_global_monitor = None
_monitor_lock = threading.Lock()


def start_temperature_monitoring(ip_address: str = "192.168.0.91", 
                                update_interval: float = 1.0) -> bool:
    """
    –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    
    Args:
        ip_address: IP –∞–¥—Ä–µ—Å –º–∞–π–Ω–µ—Ä–∞
        update_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
    """
    global _global_monitor
    
    with _monitor_lock:
        if _global_monitor is not None:
            return True  # –£–∂–µ –∑–∞–ø—É—â–µ–Ω
        
        _global_monitor = SimpleTemperatureMonitor(ip_address, update_interval=update_interval)
        return _global_monitor.start_monitoring()


def stop_temperature_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global _global_monitor
    
    with _monitor_lock:
        if _global_monitor is not None:
            _global_monitor.stop_monitoring()
            _global_monitor = None


def get_current_temperature() -> Optional[float]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∂–∏–¥–∫–æ—Å—Ç–∏
    
    Returns:
        float: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    global _global_monitor
    
    with _monitor_lock:
        if _global_monitor is None:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if not start_temperature_monitoring():
                return None
        
        return _global_monitor.get_current_temperature()


def get_temperature_status() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    
    Returns:
        str: –°—Ç–∞—Ç—É—Å (normal/warning/critical/unknown/error)
    """
    global _global_monitor
    
    with _monitor_lock:
        if _global_monitor is None:
            if not start_temperature_monitoring():
                return "error"
        
        data = _global_monitor.get_current_data()
        return data.status


def get_all_temperature_data() -> Optional[dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    """
    global _global_monitor
    
    with _monitor_lock:
        if _global_monitor is None:
            if not start_temperature_monitoring():
                return None
        
        data = _global_monitor.get_current_data()
        
        return {
            "liquid_temperature": data.liquid_temperature,
            "psu_temperature": data.psu_temperature,
            "fan_speed": data.fan_speed,
            "timestamp": data.timestamp.isoformat() if data.timestamp else None,
            "status": data.status,
            "error_message": data.error_message
        }


def is_temperature_monitoring_active() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
    """
    global _global_monitor
    
    with _monitor_lock:
        return _global_monitor is not None and _global_monitor.is_running


def get_monitoring_statistics() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
    """
    global _global_monitor
    
    with _monitor_lock:
        if _global_monitor is None:
            return {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "success_rate": 0.0,
                "last_error": None,
                "is_running": False
            }
        
        return _global_monitor.get_statistics()


class TemperatureAPI:
    """
    –ö–ª–∞—Å—Å API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
    –£–¥–æ–±–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –∫–ª–∞–ø–∞–Ω–æ–≤
    """
    
    def __init__(self, ip_address: str = "192.168.0.91", update_interval: float = 1.0):
        self.ip_address = ip_address
        self.update_interval = update_interval
        self.monitor = None
        
    def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.monitor is None:
            self.monitor = SimpleTemperatureMonitor(
                self.ip_address, 
                update_interval=self.update_interval
            )
        
        return self.monitor.start_monitoring()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.monitor is not None:
            self.monitor.stop_monitoring()
    
    def get_temperature(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        if self.monitor is None:
            return None
        return self.monitor.get_current_temperature()
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if self.monitor is None:
            return "error"
        data = self.monitor.get_current_data()
        return data.status
    
    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        if self.monitor is None:
            return False
        stats = self.monitor.get_statistics()
        return stats['success_rate'] > 50 if stats['total_requests'] > 0 else True
    
    def get_all_data(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.monitor is None:
            return None
        
        data = self.monitor.get_current_data()
        return {
            "liquid_temperature": data.liquid_temperature,
            "psu_temperature": data.psu_temperature,
            "fan_speed": data.fan_speed,
            "timestamp": data.timestamp.isoformat() if data.timestamp else None,
            "status": data.status,
            "error_message": data.error_message
        }
    
    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.start()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        self.stop()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–ª–∞–ø–∞–Ω–æ–≤
class ValveController:
    """
    –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–ª–∞–ø–∞–Ω–æ–≤ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    """
    
    def __init__(self, target_temperature: float = 50.0, ip_address: str = "192.168.0.91"):
        self.target_temperature = target_temperature
        self.temp_api = TemperatureAPI(ip_address, update_interval=1.0)
        self.temp_api.start()
        
        # –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        self.kp = 0.1  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.ki = 0.01  # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.kd = 0.05  # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        
        self.previous_error = 0.0
        self.integral = 0.0
        
    def calculate_valve_position(self) -> Optional[float]:
        """
        –†–∞—Å—á–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–ª–∞–ø–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        
        Returns:
            float: –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞ –æ—Ç -1.0 –¥–æ 1.0 –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        current_temp = self.temp_api.get_temperature()
        
        if current_temp is None:
            return None  # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        
        # –†–∞—Å—á–µ—Ç –æ—à–∏–±–∫–∏
        error = self.target_temperature - current_temp
        
        # –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä
        self.integral += error
        derivative = error - self.previous_error
        
        output = (self.kp * error + 
                 self.ki * self.integral + 
                 self.kd * derivative)
        
        self.previous_error = error
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        return max(-1.0, min(1.0, output))
    
    def get_temperature_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        return {
            "current_temperature": self.temp_api.get_temperature(),
            "target_temperature": self.target_temperature,
            "status": self.temp_api.get_status(),
            "is_healthy": self.temp_api.is_healthy()
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.temp_api.stop()


if __name__ == "__main__":
    # –¢–µ—Å—Ç API
    print("üå°Ô∏è –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ API —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if start_temperature_monitoring():
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        time.sleep(3)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        temp = get_current_temperature()
        status = get_temperature_status()
        all_data = get_all_temperature_data()
        stats = get_monitoring_statistics()
        
        print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        print(f"üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ: {all_data}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        stop_temperature_monitoring()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥") 