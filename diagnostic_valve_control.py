#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ valve_control –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import time
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

def get_valve_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ valve control"""
    try:
        from valve_control.data_manager_integration import (
            get_temperature_for_valve_controller,
            is_temperature_provider_running
        )
        from data_manager.core_system import (
            get_temperature_settings,
            is_core_system_running,
            get_current_temperature
        )
        
        status = {
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'core_system_running': False,
            'valve_provider_running': False,
            'temperature_from_valve': None,
            'temperature_from_core': None,
            'temperature_settings': None,
            'error': None
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ core system
        status['core_system_running'] = is_core_system_running()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ valve provider
        status['valve_provider_running'] = is_temperature_provider_running()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ valve provider
        if status['valve_provider_running']:
            status['temperature_from_valve'] = get_temperature_for_valve_controller()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
        if status['core_system_running']:
            status['temperature_from_core'] = get_current_temperature()
            status['temperature_settings'] = get_temperature_settings()
        
        return status
        
    except Exception as e:
        return {
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'error': str(e)
        }

def print_status(status):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞"""
    print(f"\nüïê {status['timestamp']}")
    print("=" * 50)
    
    if status.get('error'):
        print(f"‚ùå –û–®–ò–ë–ö–ê: {status['error']}")
        return
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
    core_status = "‚úÖ" if status['core_system_running'] else "‚ùå"
    valve_status = "‚úÖ" if status['valve_provider_running'] else "‚ùå"
    
    print(f"üìä Core System:        {core_status}")
    print(f"üîß Valve Provider:     {valve_status}")
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    temp_valve = status['temperature_from_valve']
    temp_core = status['temperature_from_core']
    
    if temp_valve is not None:
        print(f"üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (valve): {temp_valve:.1f}¬∞C")
    else:
        print("üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (valve): –ù–ï–î–û–°–¢–£–ü–ù–ê")
    
    if temp_core is not None:
        print(f"üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (core):  {temp_core:.1f}¬∞C")
    else:
        print("üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (core):  –ù–ï–î–û–°–¢–£–ü–ù–ê")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    settings = status['temperature_settings']
    if settings:
        min_temp = settings.get('min_temperature', 'N/A')
        max_temp = settings.get('max_temperature', 'N/A')
        print(f"‚öôÔ∏è  –ü–æ—Ä–æ–≥–∏: {min_temp}¬∞C - {max_temp}¬∞C")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if temp_valve is not None and isinstance(min_temp, (int, float)) and isinstance(max_temp, (int, float)):
            if temp_valve >= max_temp:
                print("üî• –î–û–õ–ñ–ù–û –í–ö–õ–Æ–ß–ò–¢–¨–°–Ø –û–•–õ–ê–ñ–î–ï–ù–ò–ï!")
            elif temp_valve <= min_temp:
                print("‚ùÑÔ∏è  –î–û–õ–ñ–ù–û –í–´–ö–õ–Æ–ß–ò–¢–¨–°–Ø –û–•–õ–ê–ñ–î–ï–ù–ò–ï!")
            else:
                print("‚ö° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ")
    else:
        print("‚öôÔ∏è  –ü–æ—Ä–æ–≥–∏: –ù–ï–î–û–°–¢–£–ü–ù–´")

def monitor_system():
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê VALVE CONTROL")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    try:
        while True:
            status = get_valve_status()
            print_status(status)
            time.sleep(2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
    except KeyboardInterrupt:
        print("\n\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    monitor_system() 