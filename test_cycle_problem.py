#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–¥–Ω–∏–º —Ü–∏–∫–ª–æ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
"""

import time
import sys
import os
import threading
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

def test_single_cycle_problem():
    """–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–¥–Ω–∏–º —Ü–∏–∫–ª–æ–º"""
    
    print("üîç –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–´ '–û–î–ò–ù –¶–ò–ö–õ –ò –°–¢–û–ü'")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from data_manager.core_system import (
            start_core_system, 
            set_temperature_settings, 
            get_temperature_settings,
            stop_core_system
        )
        from valve_control.data_manager_integration import (
            start_temperature_data_provider,
            get_temperature_for_valve_controller
        )
        from valve_control.valve_controller import ValveController, ValveControllerConfig
        from valve_control.config import load_config_from_env
        
        # 1. –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        print("1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
        if not start_core_system(temperature_ip="192.168.0.127", temperature_update_interval=1.0):
            return False
        print("‚úÖ Data manager –∑–∞–ø—É—â–µ–Ω")
        time.sleep(2)
        
        # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        current_temp = get_temperature_for_valve_controller() if get_temperature_for_valve_controller else 48.0
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∏–ª–æ—Å—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
        max_temp = current_temp - 1.0  # –ù–∞ 1 –≥—Ä–∞–¥—É—Å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π
        min_temp = current_temp - 3.0  # –ù–∞ 3 –≥—Ä–∞–¥—É—Å–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π
        
        print(f"2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Ä–æ–≥–æ–≤: {min_temp:.1f}¬∞C - {max_temp:.1f}¬∞C (—Ç–µ–∫—É—â–∞—è: {current_temp:.1f}¬∞C)")
        if not set_temperature_settings(max_temp=max_temp, min_temp=min_temp, source_module="cycle_test"):
            return False
        
        # 3. –ó–∞–ø—É—Å–∫ valve control
        print("3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ valve control...")
        if not start_temperature_data_provider(update_interval=1.0):
            return False
        
        relay_config, temp_config, monitoring_config, safety_config = load_config_from_env()
        config = ValveControllerConfig(
            relay_config=relay_config,
            temperature_config=temp_config,
            monitoring_config=monitoring_config,
            safety_config=safety_config
        )
        
        valve_controller = ValveController(
            temperature_callback=get_temperature_for_valve_controller,
            config=config
        )
        
        if not valve_controller.sync_temperature_settings_with_data_manager():
            return False
        
        # –ó–∞–ø—É—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ
        controller_running = threading.Event()
        
        def run_controller():
            try:
                if valve_controller.start():
                    controller_running.set()
                    valve_controller.run_forever()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")
        
        controller_thread = threading.Thread(target=run_controller, daemon=True)
        controller_thread.start()
        
        if not controller_running.wait(timeout=5):
            print("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
        
        print("‚úÖ Valve control –∑–∞–ø—É—â–µ–Ω")
        
        # 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–∏–∫–ª–æ–≤ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        print("4Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–∏–∫–ª–æ–≤ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è...")
        print("=" * 50)
        
        cooling_cycles = []
        last_cooling_state = False
        cycle_count = 0
        
        for monitor_round in range(120):  # 2 –º–∏–Ω—É—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                temp = get_temperature_for_valve_controller()
                cooling_active = valve_controller.is_cooling_active()
                settings = get_temperature_settings()
                
                if temp is None or not settings:
                    continue
                
                min_temp = settings['min_temperature']
                max_temp = settings['max_temperature']
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                if cooling_active != last_cooling_state:
                    if cooling_active:
                        cycle_count += 1
                        cycle_start = {
                            'cycle': cycle_count,
                            'start_time': datetime.now().strftime('%H:%M:%S'),
                            'start_temp': temp,
                            'max_temp': max_temp,
                            'min_temp': min_temp
                        }
                        cooling_cycles.append(cycle_start)
                        print(f"üî• –¶–ò–ö–õ {cycle_count} –ù–ê–ß–ê–¢: T={temp:.1f}¬∞C –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ {max_temp:.1f}¬∞C")
                    else:
                        if cooling_cycles:
                            last_cycle = cooling_cycles[-1]
                            last_cycle['end_time'] = datetime.now().strftime('%H:%M:%S')
                            last_cycle['end_temp'] = temp
                            print(f"‚ùÑÔ∏è –¶–ò–ö–õ {cycle_count} –ó–ê–í–ï–†–®–ï–ù: T={temp:.1f}¬∞C –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ {min_temp:.1f}¬∞C")
                    
                    last_cooling_state = cooling_active
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if monitor_round % 5 == 0:
                    status = "üî• –í–ö–õ" if cooling_active else "‚ùÑÔ∏è –í–´–ö–õ"
                    print(f"   [{monitor_round//5+1:2d}] T={temp:.1f}¬∞C, –ø–æ—Ä–æ–≥–∏=[{min_temp:.1f}-{max_temp:.1f}¬∞C], –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ={status}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É
                    if not cooling_active and temp >= max_temp:
                        print(f"   üö® –ü–†–û–ë–õ–ï–ú–ê: T={temp:.1f}¬∞C >= {max_temp:.1f}¬∞C, –Ω–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ù–ï –í–ö–õ–Æ–ß–ê–ï–¢–°–Ø!")
                
                # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ—Å—Ç–∞ (–∫–∞–∫ –æ—Ç GUI)
                if monitor_round == 60:  # –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
                    print("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö GUI...")
                    new_max = current_temp - 0.5  # –ï—â–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
                    new_min = current_temp - 2.5
                    
                    success = set_temperature_settings(
                        max_temp=new_max,
                        min_temp=new_min, 
                        source_module="gui_simulation"
                    )
                    if success:
                        print(f"‚úÖ –ù–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏: {new_min:.1f}¬∞C - {new_max:.1f}¬∞C")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                break
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("=" * 50)
        
        if not cooling_cycles:
            print("‚ùå –ù–ï –ë–´–õ–û –ù–ò –û–î–ù–û–ì–û –¶–ò–ö–õ–ê –û–•–õ–ê–ñ–î–ï–ù–ò–Ø!")
        else:
            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(cooling_cycles)} —Ü–∏–∫–ª–æ–≤ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:")
            for cycle in cooling_cycles:
                start_time = cycle.get('start_time', '?')
                end_time = cycle.get('end_time', '–ù–ï –ó–ê–í–ï–†–®–ï–ù')
                start_temp = cycle.get('start_temp', 0)
                end_temp = cycle.get('end_temp', '?')
                
                print(f"   –¶–∏–∫–ª {cycle['cycle']}: {start_time}-{end_time}, T: {start_temp:.1f}¬∞C -> {end_temp}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
        if len(cooling_cycles) == 1 and 'end_time' in cooling_cycles[0]:
            print("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –¢–û–õ–¨–ö–û –û–î–ò–ù –¶–ò–ö–õ –ò –û–°–¢–ê–ù–û–í–ö–ê!")
        elif len(cooling_cycles) > 1:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ - –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞")
        
        print("\n6Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        valve_controller.stop()
        stop_core_system()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        success = test_single_cycle_problem()
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}") 