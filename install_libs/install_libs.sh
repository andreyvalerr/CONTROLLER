#!/usr/bin/env bash
set -euo pipefail

# –ò–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä CONTROLLER –ø–æ —à–∞–≥–∞–º –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "## üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞" README
# –î–µ–ª–∞–µ—Ç:
#  1) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ GUI/LightDM/X –∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (apt)
#  2) –£—Å—Ç–∞–Ω–æ–≤–∫—É Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt (pip –∏–ª–∏ –≤ venv –ø—Ä–∏ --venv)
#  3) –ù–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ LightDM
#  4) –£—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞ cryptoboiler.service
#  5) –ù–∞—Å—Ç—Ä–æ–π–∫—É –∫–∏–æ—Å–∫-—Ä–µ–∂–∏–º–∞ –≤ –æ–∫–æ–Ω–Ω–æ–º –≤–∏–¥–µ (–∫—É—Ä—Å–æ—Ä –≤–∏–¥–µ–Ω, –µ—Å—Ç—å —Ä–∞–º–∫–∞ –æ–∫–Ω–∞)

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)"
REQ_FILE="$PROJECT_DIR/requirements.txt"
SERVICE_SRC="$PROJECT_DIR/start/cryptoboiler.service"
SERVICE_DST="/etc/systemd/system/cryptoboiler.service"
LIGHTDM_DIR="/etc/lightdm/lightdm.conf.d"
AUTOLOGIN_CONF="$LIGHTDM_DIR/11-autologin.conf"
KIVY_CONFIG_DIR="$HOME/.kivy"
KIVY_CONFIG="$KIVY_CONFIG_DIR/config.ini"
LXSESSION_AUTOSTART_DIR="$HOME/.config/lxsession/LXDE-pi"
LXSESSION_AUTOSTART="$LXSESSION_AUTOSTART_DIR/autostart"
START_SH="$PROJECT_DIR/start/start_controller.sh"

usage() {
	echo "Usage: $0 [--venv <path>] [--check] [--user <name>] [--no-systemd] [--no-lightdm] [--no-kiosk] [--no-vnc] [--no-upgrade] [--reboot]" >&2
	echo "  --venv <path>    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python-–ø–∞–∫–µ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π venv —á–µ—Ä–µ–∑ pip" >&2
	echo "  --check          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" >&2
	echo "  --user <name>    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ LightDM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SUDO_USER/USER)" >&2
	echo "  --no-systemd     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É/–≤–∫–ª—é—á–µ–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞" >&2
	echo "  --no-lightdm     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ LightDM" >&2
	echo "  --no-kiosk       –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∏–æ—Å–∫-—Ä–µ–∂–∏–º–∞ (–æ–∫–æ–Ω–Ω–æ–≥–æ)" >&2
	echo "  --no-vnc         –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É VNC" >&2
	echo "  --no-upgrade     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å apt upgrade (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ install)" >&2
	echo "  --reboot         –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤ –∫–æ–Ω—Ü–µ" >&2
}

VENV_PATH=""
DO_CHECK=false
SKIP_SYSTEMD=false
SKIP_LIGHTDM=false
SKIP_KIOSK=false
SKIP_VNC=false
SKIP_UPGRADE=false
DO_REBOOT=false
AUTOLOGIN_USER="${SUDO_USER:-${USER}}"

while [[ $# -gt 0 ]]; do
	case "$1" in
		--venv)
			shift
			VENV_PATH="${1:-}"
			[[ -z "$VENV_PATH" ]] && { echo "error: --venv —Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç—å" >&2; exit 1; }
			shift
			;;
		--check)
			DO_CHECK=true; shift;
			;;
		--user)
			shift
			AUTOLOGIN_USER="${1:-}"
			[[ -z "$AUTOLOGIN_USER" ]] && { echo "error: --user —Ç—Ä–µ–±—É–µ—Ç –∏–º—è" >&2; exit 1; }
			shift
			;;
		--no-systemd)
			SKIP_SYSTEMD=true; shift;
			;;
		--no-lightdm)
			SKIP_LIGHTDM=true; shift;
			;;
		--no-kiosk)
			SKIP_KIOSK=true; shift;
			;;
		--no-vnc)
			SKIP_VNC=true; shift;
			;;
		--no-upgrade)
			SKIP_UPGRADE=true; shift;
			;;
		--reboot)
			DO_REBOOT=true; shift;
			;;
		-h|--help)
			usage; exit 0;
			;;
		*)
			echo "error: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1" >&2
			usage; exit 1
			;;
	esac
done

log() { echo "[+] $*"; }
warn() { echo "[warn] $*"; }
ok() { echo "[ok] $*"; }

step_apt_prepare() {
	log "–û–±–Ω–æ–≤–ª—è—é –∏–Ω–¥–µ–∫—Å—ã –ø–∞–∫–µ—Ç–æ–≤ (apt update)"
	sudo DEBIAN_FRONTEND=noninteractive apt-get update
	if ! $SKIP_UPGRADE; then
		log "–û–±–Ω–æ–≤–ª—è—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (apt upgrade)"
		sudo DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
	else
		warn "–ü—Ä–æ–ø—É—Å–∫–∞—é apt upgrade (–∑–∞–¥–∞–Ω --no-upgrade)"
	fi
}

step_apt_install() {
	log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é GUI/LightDM/X –∏ Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (apt install)"
	sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
		raspberrypi-ui-mods \
		lightdm \
		x11-xserver-utils \
		curl \
		rsync \
		python3-pip \
		python3-kivy \
		python3-pycryptodome \
		python3-rpi.gpio || true
}

ensure_venv() {
	if [[ -n "$VENV_PATH" ]]; then
		log "–°–æ–∑–¥–∞—é/–∞–∫—Ç–∏–≤–∏—Ä—É—é venv: $VENV_PATH"
		python3 -m venv "$VENV_PATH"
		source "$VENV_PATH/bin/activate"
		python -m pip install --upgrade pip
	fi
}

step_python_requirements() {
	if [[ -n "$VENV_PATH" ]]; then
		log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt –≤ venv"
		pip install -r "$REQ_FILE"
	else
		log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ä–µ–¥—É (--break-system-packages)"
		pip3 install -r "$REQ_FILE" --break-system-packages || warn "–ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --venv <path>"
	fi
}

step_lightdm_autologin() {
	$SKIP_LIGHTDM && { warn "–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É LightDM (–∑–∞–¥–∞–Ω --no-lightdm)"; return; }
	log "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–≤—Ç–æ–ª–æ–≥–∏–Ω LightDM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $AUTOLOGIN_USER"
	sudo mkdir -p "$LIGHTDM_DIR"
	printf "[Seat:*]\nautologin-user=%s\nautologin-user-timeout=0\n" "$AUTOLOGIN_USER" | sudo tee "$AUTOLOGIN_CONF" >/dev/null
}

step_add_user_gpio() {
	log "–î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $AUTOLOGIN_USER –≤ –≥—Ä—É–ø–ø—É gpio"
	if id "$AUTOLOGIN_USER" >/dev/null 2>&1; then
		sudo usermod -a -G gpio "$AUTOLOGIN_USER" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É gpio"
	else
		warn "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $AUTOLOGIN_USER –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ gpio"
	fi
}

step_systemd_service() {
	$SKIP_SYSTEMD && { warn "–ü—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É systemd-—Å–µ—Ä–≤–∏—Å–∞ (–∑–∞–¥–∞–Ω --no-systemd)"; return; }
	log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é systemd-—Å–µ—Ä–≤–∏—Å cryptoboiler"
	sudo cp "$SERVICE_SRC" "$SERVICE_DST"
	sudo systemctl daemon-reload
	sudo systemctl enable cryptoboiler.service
	log "–í–∫–ª—é—á–∞—é –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç–∞—Ä–≥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
	sudo systemctl set-default graphical.target
}

step_kiosk_windowed() {
	$SKIP_KIOSK && { warn "–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∏–æ—Å–∫-—Ä–µ–∂–∏–º–∞ (–∑–∞–¥–∞–Ω --no-kiosk)"; return; }
	log "–°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥ Kivy (–ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∫–∏–æ—Å–∫, –∫—É—Ä—Å–æ—Ä –≤–∫–ª—é—á–µ–Ω)"
	mkdir -p "$KIVY_CONFIG_DIR"
	cat > "$KIVY_CONFIG" << 'EOF'
[graphics]
fullscreen = 1
borderless = 1
show_cursor = 1
width = 800
height = 480
EOF
	log "–û—Ç–∫–ª—é—á–∞—é –±–ª–∞–Ω–∫–∏–Ω–≥/DPMS —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ LXDE"
	mkdir -p "$LXSESSION_AUTOSTART_DIR"
	cat > "$LXSESSION_AUTOSTART" << 'EOF'
@xset s off
@xset -dpms
@xset s noblank
EOF
	if [[ ! -f "$START_SH" ]]; then
		warn "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $START_SH"
	fi
}

step_vnc_setup() {
	$SKIP_VNC && { warn "–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É VNC (–∑–∞–¥–∞–Ω --no-vnc)"; return; }
	if [[ -x "$PROJECT_DIR/install_libs/install_realVNC.sh" ]]; then
		log "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é VNC (–∫–∞–∫ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ)"
		bash "$PROJECT_DIR/install_libs/install_realVNC.sh" || warn "–°–∫—Ä–∏–ø—Ç VNC –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º"
	else
		warn "–°–∫—Ä–∏–ø—Ç VNC –Ω–µ –Ω–∞–π–¥–µ–Ω: $PROJECT_DIR/install_libs/install_realVNC.sh"
	fi
}

step_install_updater() {
	local updater="/usr/local/bin/cryptoboiler-update"
	log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GitHub Releases: $updater"
	sudo bash -c "cat > '$updater' <<'UPD'
#!/usr/bin/env bash
set -euo pipefail

PROJECT_DIR="/home/${SUDO_USER:-$USER}/CONTROLLER"

# –ü–∞—Ä–∞–º–µ—Ç—Ä: --repo-url=https://github.com/<owner>/<repo>
REPO_URL=""
for arg in "$@"; do
  case "$arg" in
    --repo-url=*) REPO_URL="${arg#*=}" ;;
  esac
done

if [[ -z "$REPO_URL" ]]; then
  if command -v git >/dev/null 2>&1 && [[ -d "$PROJECT_DIR/.git" ]]; then
    REPO_URL=$(git -C "$PROJECT_DIR" remote get-url origin || true)
  fi
fi

if [[ -z "$REPO_URL" ]]; then
  echo "error: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --repo-url=https://github.com/<owner>/<repo>" >&2
  exit 1
fi

# –ò–∑–≤–ª–µ–∫–∞–µ–º owner/repo
OWNER=""
REPO=""
if [[ "$REPO_URL" =~ github.com[:/]+([^/]+)/([^/.]+) ]]; then
  OWNER="${BASH_REMATCH[1]}"
  REPO="${BASH_REMATCH[2]}"
else
  echo "error: –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $REPO_URL" >&2
  exit 1
fi

echo "[+] –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Releases –¥–ª—è $OWNER/$REPO"
TARBALL_URL=$(curl -s https://api.github.com/repos/$OWNER/$REPO/releases/latest | grep -m1 '"tarball_url"' | cut -d '"' -f4 || true)
if [[ -z "$TARBALL_URL" ]]; then
  echo "error: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tarball_url" >&2
  exit 1
fi

TMPDIR=$(mktemp -d)
trap 'rm -rf "$TMPDIR"' EXIT
echo "[+] –°–∫–∞—á–∏–≤–∞—é: $TARBALL_URL"
curl -L "$TARBALL_URL" -o "$TMPDIR/release.tar.gz"

echo "[+] –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤"
tar -xzf "$TMPDIR/release.tar.gz" -C "$TMPDIR"
SRCDIR=$(tar -tzf "$TMPDIR/release.tar.gz" | head -1 | cut -d/ -f1)
if [[ -z "$SRCDIR" || ! -d "$TMPDIR/$SRCDIR" ]]; then
  echo "error: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏" >&2
  exit 1
fi

echo "[+] –û–±–Ω–æ–≤–ª—è—é —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ GUI)"
sudo apt-get install -y rsync >/dev/null 2>&1 || true
rsync -a --delete \
  --exclude 'data_manager/config/gui_settings.json' \
  --exclude 'data_manager/config/backups/' \
  "$TMPDIR/$SRCDIR/" "$PROJECT_DIR/"

echo "[+] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å"
sudo systemctl restart cryptoboiler.service || true
echo "[ok] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
UPD"
	sudo chmod +x "$updater"
}

run_checks() {
	log "–ü—Ä–æ–≤–µ—Ä—è—é –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö Python-–±–∏–±–ª–∏–æ—Ç–µ–∫"
	set +e
	python3 - <<'PY'
try:
	import kivy
	print("kivy", getattr(kivy, "__version__", "installed"))
except Exception as e:
	print("kivy: FAIL", e)

try:
	from Cryptodome.Cipher import AES
	from Cryptodome.Util.Padding import pad, unpad
	import Cryptodome
	print("pycryptodome(Cryptodome)", getattr(Cryptodome, "__version__", "installed"))
except Exception as e:
	print("pycryptodome: FAIL", e)

try:
	import RPi.GPIO as GPIO
	print("RPi.GPIO", getattr(GPIO, "VERSION", "installed"))
except Exception as e:
	print("RPi.GPIO: FAIL", e)
PY
	set -e
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤
step_apt_prepare
step_apt_install
ensure_venv
step_python_requirements
step_lightdm_autologin
step_add_user_gpio
step_systemd_service
step_kiosk_windowed
step_vnc_setup
step_install_updater

$DO_CHECK && run_checks || true

ok "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É."
if $DO_REBOOT; then
	log "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞..."
	sudo reboot
fi

#!/usr/bin/env bash
set -euo pipefail

# –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è CONTROLLER
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (apt) –Ω–∞ Raspberry Pi.
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: --venv /path/to/venv
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ñ–ª–∞–≥ --check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.

REQ_FILE="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)/requirements.txt"

usage() {
	echo "Usage: $0 [--venv <path>] [--check]" >&2
	echo "  --venv <path>   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ venv —á–µ—Ä–µ–∑ pip" >&2
	echo "  --check         –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" >&2
}

VENV_PATH=""
DO_CHECK=false

while [[ $# -gt 0 ]]; do
	case "$1" in
		--venv)
			shift
			VENV_PATH="${1:-}"
			[[ -z "$VENV_PATH" ]] && { echo "error: --venv —Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç—å" >&2; exit 1; }
			shift
			;;
		--check)
			DO_CHECK=true
			shift
			;;
		-h|--help)
			usage; exit 0;
			;;
		*)
			echo "error: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1" >&2
			usage; exit 1
			;;
	esac
done

install_with_apt() {
	echo "[+] –û–±–Ω–æ–≤–ª—è—é –∏–Ω–¥–µ–∫—Å—ã –ø–∞–∫–µ—Ç–æ–≤..."
	sudo DEBIAN_FRONTEND=noninteractive apt-get update
	echo "[+] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: python3-kivy, python3-pycryptodome, RPi.GPIO (apt)"
	# python3-pycryptodome –¥–∞—ë—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω Cryptodome
	sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
		python3-kivy \
		python3-pycryptodome \
		python3-rpi.gpio || true

	# –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –ø–∞–∫–µ—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è python3-rpi.gpio, –Ω–∞ –¥—Ä—É–≥–∏—Ö RPi.GPIO —É–∂–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	if python3 -c "import RPi.GPIO as GPIO; print(GPIO.VERSION)" >/dev/null 2>&1; then
		echo "[ok] RPi.GPIO –¥–æ—Å—Ç—É–ø–µ–Ω"
	else
		echo "[warn] RPi.GPIO –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ apt. –ü–æ–ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤..."
		sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-rpi.gpio RPi.GPIO || true
	fi
}

ensure_venv() {
	if [[ -n "$VENV_PATH" ]]; then
		echo "[+] –°–æ–∑–¥–∞—é venv: $VENV_PATH (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
		python3 -m venv "$VENV_PATH"
		source "$VENV_PATH/bin/activate"
		python -m pip install --upgrade pip
		# –ù–∞ Debian/PEP 668 –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–ª—é—á
		PIP_FLAGS=""
		python -c "import sys; print(int(sys.version_info[:2] >= (3,11)))" >/dev/null 2>&1 || true
	fi
}

install_with_pip() {
	# –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω venv ‚Äî —Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–≥–æ –ø–æ requirements.txt
	if [[ -n "${VENV_PATH}" ]]; then
		echo "[+] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt –≤ venv"
		pip install -r "$REQ_FILE"
	else
		# –í —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ä–µ–¥—É pip –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è (PEP 668). –ú–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
		echo "[warn] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ä–µ–¥—É –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (PEP 668)."
		echo "[i] –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --venv <path> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ pip."
	fi
}

run_checks() {
	echo "[+] –ü—Ä–æ–≤–µ—Ä—è—é –∏–º–ø–æ—Ä—Ç—ã..."
	set +e
	python3 - <<'PY'
try:
	import kivy
	print("kivy", getattr(kivy, "__version__", "installed"))
except Exception as e:
	print("kivy: FAIL", e)

try:
	from Cryptodome.Cipher import AES
	from Cryptodome.Util.Padding import pad, unpad
	import Cryptodome
	print("pycryptodome(Cryptodome)", getattr(Cryptodome, "__version__", "installed"))
except Exception as e:
	print("pycryptodome: FAIL", e)

try:
	import RPi.GPIO as GPIO
	print("RPi.GPIO", getattr(GPIO, "VERSION", "installed"))
except Exception as e:
	print("RPi.GPIO: FAIL", e)
PY
	set -e
}

if [[ -n "$VENV_PATH" ]]; then
	ensure_venv
	install_with_pip
else
	install_with_apt
fi

if $DO_CHECK; then
	run_checks
fi

echo "[done] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"


