#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
"""

import time
import sys
import os
import threading
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

def test_valve_cycling():
    """–¢–µ—Å—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è valve control"""
    
    print("üî¨ –¢–ï–°–¢ –¶–ò–ö–õ–ò–ß–ï–°–ö–û–ì–û –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–Ø TEMPERATURE")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from data_manager.core_system import (
            start_core_system, 
            set_temperature_settings, 
            get_temperature_settings,
            get_current_temperature,
            stop_core_system
        )
        from valve_control.data_manager_integration import (
            start_temperature_data_provider,
            get_temperature_for_valve_controller
        )
        from valve_control.valve_controller import ValveController, ValveControllerConfig
        from valve_control.config import load_config_from_env
        
        # 1. –ó–∞–ø—É—Å–∫ data_manager
        print("1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ data_manager...")
        if not start_core_system(temperature_ip="192.168.0.127", temperature_update_interval=1.0):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å data_manager")
            return False
        print("‚úÖ Data manager –∑–∞–ø—É—â–µ–Ω")
        time.sleep(2)
        
        # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã...")
        if not set_temperature_settings(max_temp=48.0, min_temp=46.0, source_module="test"):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return False
        
        settings = get_temperature_settings()
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings['min_temperature']:.1f}¬∞C - {settings['max_temperature']:.1f}¬∞C")
        
        # 3. –ó–∞–ø—É—Å–∫ valve provider
        print("3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ valve temperature provider...")
        if not start_temperature_data_provider(update_interval=1.0):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å valve provider")
            return False
        print("‚úÖ Valve provider –∑–∞–ø—É—â–µ–Ω")
        time.sleep(1)
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ valve controller
        print("4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ valve controller...")
        relay_config, temp_config, monitoring_config, safety_config = load_config_from_env()
        config = ValveControllerConfig(
            relay_config=relay_config,
            temperature_config=temp_config,
            monitoring_config=monitoring_config,
            safety_config=safety_config
        )
        
        valve_controller = ValveController(
            temperature_callback=get_temperature_for_valve_controller,
            config=config
        )
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å data_manager
        if not valve_controller.sync_temperature_settings_with_data_manager():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return False
        
        print("‚úÖ Valve controller —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # 5. –ó–∞–ø—É—Å–∫ valve controller –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("5Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã...")
        controller_running = threading.Event()
        
        def run_controller():
            try:
                if valve_controller.start():
                    controller_running.set()
                    valve_controller.run_forever()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ: {e}")
        
        controller_thread = threading.Thread(target=run_controller, daemon=True)
        controller_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if not controller_running.wait(timeout=5):
            print("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
        
        print("‚úÖ –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
        # 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        print("6Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã (60 —Å–µ–∫—É–Ω–¥)...")
        print("=" * 60)
        
        start_time = time.time()
        cycles_logged = 0
        
        while time.time() - start_time < 60:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                temp = get_temperature_for_valve_controller()
                settings = get_temperature_settings()
                cooling_active = valve_controller.is_cooling_active()
                
                if temp is not None and settings:
                    min_temp = settings['min_temperature']
                    max_temp = settings['max_temperature']
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    if cycles_logged % 5 == 0:
                        status_icon = "üî•" if cooling_active else "‚ùÑÔ∏è"
                        should_cool = "–î–û–õ–ñ–ù–û –û–•–õ–ê–ñ–î–ê–¢–¨" if temp >= max_temp else "–ù–ï –î–û–õ–ñ–ù–û –û–•–õ–ê–ñ–î–ê–¢–¨"
                        should_stop = "–î–û–õ–ñ–ù–û –û–°–¢–ê–ù–û–í–ò–¢–¨" if temp <= min_temp else "–ù–ï –î–û–õ–ñ–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–¢–¨"
                        
                        print(f"{status_icon} T={temp:.1f}¬∞C, –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ={'–í–ö–õ' if cooling_active else '–í–´–ö–õ'}, "
                              f"–ø–æ—Ä–æ–≥–∏=[{min_temp:.1f}-{max_temp:.1f}¬∞C]")
                        
                        if cooling_active:
                            print(f"   -> {should_stop}")
                        else:
                            print(f"   -> {should_cool}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É
                        if not cooling_active and temp >= max_temp:
                            print("üö® –ü–†–û–ë–õ–ï–ú–ê: –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ, –Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ!")
                        elif cooling_active and temp <= min_temp:
                            print("üö® –ü–†–û–ë–õ–ï–ú–ê: –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–æ, –Ω–æ –≤–∫–ª—é—á–µ–Ω–æ!")
                
                cycles_logged += 1
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                break
        
        print("\n7Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        valve_controller.stop()
        stop_core_system()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    try:
        success = test_valve_cycling()
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}") 